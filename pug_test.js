const express = require(`express`); 
// ИМПОРТИРуем модуль express ИЗ Node.js 
// (предварительно загруженный из NPM - см. файл package.json и ОПИСАНИЕ файл- NPMpackage.json - ОТКРЫТ В Sublime Text)  

const app = express(); 
// формально ФРЕЙМВОРК express - это ФУНКЦИЯ !!! - которую необходимо импортировавть (стр.1) и ЗАПУСТИТЬ (стр.5)

const PORT = 3000; // Номер Порта - 3000

// Необходимо указать ПОРТ кторорый будет слушать Сервер - При помощи Метода - listen

// listen - принимает:
//                     1) Номер Порта - 3000
//                     2) Имя ХОСТА (сервера) - `localhost` (МОЖНО НЕ ПРОПИСЫВАТЬ)
//                     3) Сall-back ф-цию - в качестве аргумента - добавим информацию,
//                                          что слушаем определенный порт


app.listen(PORT, `localhost`, (error) => {
  if (error) { 
    console.log(error);
  } else {
    console.log(`Запустился ПАКЕТ-nodemon и express. Слушаем ПОРТ ${PORT}`);
  };
});
// ___________________________________________________________________________________
//_____________________ Установим ШАБЛОНИЗАТОР ejs________________________
// (предварительно загруженный из NPM - см. файл package.json и ОПИСАНИЕ файл- NPMpackage.json - ОТКРЫТ В Sublime Text)  

// Устанавливаем NPM Модуль pug (ШАБЛОНИЗАТОР) -> В КАЧЕСТВЕ ДВИЖКА view engine______
app.set(`view engine`, `pug`);
 
// https://gist.github.com/neretin-trike/53aff5afb76153f050c958b82abd9228
// https://pugjs.org/language/attributes.html

// По умолачанию express ищет шаблоны (ф-лы.pug, которые мы будем возвращать на страницу или в БД) в папке views. Если мы хотим задать другую папку для шаблонов, то используем команду: app.set('views', './views')-где второй параметр - это путь к папке шаблонов pug. Мы можем создавать любую иерархию папок внутри папки шаблонов.

// _____________________________________________________________________________________
//                        Пропишем ПРОМЕЖУТОЧНОЕ ПО (Middleware)  -  app.use(); 
//                            ВАЖНО !!! -  ДО роутинга с Ответом ФАЙЛОВ
// Node.js ЗАЩИЩАЕТ СТАТИЧНЫЕ ДАННЫЕ-> 
// когда мы добавляем какие-то Статичные ф-лы в проект (КАРТИНКИ или ФАЙЛ СТИЛЕЙ или JS-ФАЙЛ) -
// мы НЕ МОЖЕМ ПОЛУЧИТЬ К НИМ ДОСТУП (Пользователь НЕ МОЖЕТ ПОЛУЧИТЬ ДОСТУП к ЛЮБОМУ Ф-ЛУ хранящемуся НА СЕРВЕРЕ !!!)

// Необходимо написать ПРОМЕЖУТОЧНОЕ ПО (Middleware) - которое Определяет Ф-лы или Папки
 // к которым на сервере Можно получить Доступ

 app.use(express.static(`public`)); // Добваляем ПАПКУ publick в ИСКЛЮЧЕНИЯ - т.е. делаем ее ОБЩЕДОСТУПНОЙ

 //  Cервер на Node.js и Express ПО УМОЛЧАНИЮ - НЕ ДАЕТ ДОСТУП КО ВСЕМ ПАПКАМ (КРОМЕ ТЕХ, ЧТО ПРОПИСАНЫ В ИСКЛЮЧЕНИЯХ - стр.48 и ПАПКИ views)

// ______________________________________________________________________________________


//                  Рализуем РОУТИНГ ФАЙЛОВ - ИЗ ПАПКИ website

// Исспользуя express - НАМ НЕ НУЖНО перед отправкой ЧИТАТЬ ФАЙЛЫ, т.е не нужно исспользовать (как в - app.js):
//                    const fs = require(`fs`);
//                    fs.readFile(basePath, (error, data) => {}; 
// __________________________________________________________________________________
// Прописываем логику ЗАПРОСА (req) на СЕРВЕР и его ОТВЕТА (res)
// ____________________________________________________________

//1) Метод get- Обычный ЗАПРОС Данных

//  "/" - "Косая" - ОСНОВНОЙ ПУТЬ (URL) захода на Сервер)
//   
//   Сall-back ф-ция (req, res)=>{}  - Вызывается Каждый Каз когда к 
//                                     серверу происходит обращение 

//                           - В качестве аргументов Сall-back ф-ции- 
//                             req, res - Объекты Запроса и Овета

//                             req - это URL адресс, который приходит в Запросе
//                             res - Объект котрый мы будем Формировать и Отправлять
//                             в БРАУЗЕР (клиент) - как ОТВЕТ
// ____________________________________________________________________________________

//                                  ВЫВОД СЛОВА Cat - НА САЙТ

app.get(`/cat`, (req, res)=>{ // http://localhost:3000/cat 

  console.log(`Произведен запрос на СЕРВЕР http://localhost:3000/cat -  метод запроса: ${req.method}`); 

  res.end(`Cat`); // выведем на сайт СЛОВО - Cat

  //  F12-> Network -> Name(localhost) -> Response
});
// ___________________________________________________________________________


//                             Возвращаем ф-л: publick/index_file.html

 //Возвращаем ф-л: index.html исспользуя Метод: res.sendFile()

app.get(`/index`, (req, res)=>{ // http://localhost:3000/index 

  console.log(`Произведен запрос на СЕРВЕР http://localhost:3000/index`); 

  res.sendFile(`D:/WEB-ПРОГРАМИРОВАНИЕ/NodeJS-MySQL-E-Shop/public/index_test.html`); 
});
// ____________________________________________________________________________

//                             Возвращаем ф-л: views/test.pug - ПРИМЕРЫ РАБОТЫ С ШАБЛОНИЗАТОРОМ - PUG

 //Возвращаем ф-л:test.pug  -  исспользуя Метод render() - т.к. исспользуем ШАБЛОНИЗАТОР - Pug; стр.31 (Handlebars или ejs)

 // 1) Такой синтаксис вывода ф-ла test.pug -> РАБОТАЕТ - если нужные ф-лы РАЗМЕЩЕНЫ В ПАПКЕ views (если в другой папке - РАБОТАТЬ НЕ БУДЕТ!!!). В папке views - по умолачанию express ищет шаблоны (ф-лы.pug, которые мы будем возвращать на страницу или в БД).

 app.get(`/pug`, (req, res)=>{ // http://localhost:3000/pug 

  console.log(`Произведен запрос на СЕРВЕР http://localhost:3000/pug`); 
 
  res.render(`test.pug`, {
                                firstName:`Sergii`,
                                lastName: `Pedko`,
                                 age: function () { return 49; },
                                
                                myGoods:[
                                          {
                                            id: 1,
                                            name: 'Asus VivoBook D540NA-GQ211T',
                                            description: 'Екран 15.6" (1366x768) WXGA HD',
                                            cost: 7999,
                                            category: 1
                                          },
                                          {
                                            id: 2,
                                            name: 'Ноутбук Lenovo IdeaPad 330-15AST',
                                            description: 'Екран 15.6" TN+film (1366x768) HD',
                                            cost: 6499,
                                            image: 'lenovo_81d600jyra_images_10442255288.jpg',
                                            category: 1
                                          } 
                                        ]                                 
                              }); 
  
  // 2) Значения Объекта {firstName:`Sergii`, lastName: `Pedko`, age: function () { return 49; }} - можно вытянуть в тегах <p>, <h3> и <div> в ф-ле main_test.pug - стр. 7-9. Так можно сделать эти теги ДИНАМИЧЕСКИМ
});
// ____________________________________________________________________________

//                  Возвращаем ф-л: views/test_index.pug  - ПРИМЕРЫ РАБОТЫ С ШАБЛОНИЗАТОРОМ - PUG

//     (Делаем МЕНЮ в файле test_index.pug - в который ПОДКЛЮЧАЕМ test_menu.pug; test_menu.css; test_menu.js)

 //Возвращаем ф-л: test_index.pug - исспользуя Метод render() - т.к. исспользуем ШАБЛОНИЗАТОР - Pug; стр.31 (Handlebars или ejs)

 // 1) Такой синтаксис вывода ф-ла test_index.pug -> РАБОТАЕТ - если нужные ф-лы РАЗМЕЩЕНЫ В ПАПКЕ views (если в другой папке - РАБОТАТЬ НЕ БУДЕТ!!!). В папке views - по умолачанию express ищет шаблоны (ф-лы.pug, которые мы будем возвращать на страницу или в БД).

 app.get(`/test_index_pug`, (req, res)=>{ // http://localhost:3000/test_index_pug

  console.log(`Произведен запрос на СЕРВЕР http://localhost:3000/test_index.pug`); 
 
  res.render(`test_index.pug`); 
  
});
// ____________________________________________________________________________

//               Возвращаем ф-л: views/help.pug  - Для просмотра КУСКОВ КОДА - PUG

  app.get(`/help`, (req, res)=>{ // http://localhost:3000/help

    console.log(`Произведен запрос на СЕРВЕР http://localhost:3000/help`); 
  
    res.render(`help.pug`);     
});
